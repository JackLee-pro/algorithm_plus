# [147. 对链表进行插入排序](https://leetcode-cn.com/problems/insertion-sort-list/)

## 题目解析

对链表进行插入排序。

![](https://upload.wikimedia.org/wikipedia/commons/0/0f/Insertion-sort-example-300px.gif)

从第一个元素开始，该链表可以被认为已经部分排序（用黑色表示）。每次迭代时，从输入数据中移除一个元素（用红色表示），并原地将其插入到已排好序的链表中。

插入排序算法：

1. 插入排序是迭代的，每次只移动一个元素，直到所有元素可以形成一个有序的输出列表。
2. 每次迭代中，插入排序只从输入数据中移除一个待排序的元素，找到它在序列中适当的位置，并将其插入。
3. 重复直到所有输入数据插入完为止。

## 思路

1、已知从第一个元素开始，该链表可以被认为已经部分排序，已排序的部分不需要处理，我们从无序的第一个节点开始处理。

2、从头节点开始向后比较，找到已排序的最后一个节点，其后继节点即为无序的第一个节点。

3、用无序的第一个节点从头节点开始比较，找到插入节点的前驱节点。

4、通过断链重连进行插入排序。

## 代码

    public ListNode insertionSortList(ListNode head) {
        if (head == null) {
            return null;
        }

        ListNode markNode = new ListNode(0);
        markNode.next = head;

        while (head != null && head.next != null) {
            // 从头节点开始向后比较，找到已排序的最后一个节点
            if (head.val <= head.next.val) {
                head = head.next;
                continue;
            }

            ListNode preNode = markNode;

            // 用无序的第一个节点从头节点开始比较，找到插入节点的前驱节点
            while (preNode.next.val <= head.next.val) {
                preNode = preNode.next;
            }

            // 通过断链重连进行插入排序
            ListNode currNode = head.next;
            head.next = currNode.next;
            currNode.next = preNode.next;
            preNode.next = currNode;
        }

        return markNode.next;
    }

## 复杂度分析

时间复杂度 O(n ^ 2)，空间复杂度 O(1)。